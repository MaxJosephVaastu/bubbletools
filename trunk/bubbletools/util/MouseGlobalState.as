// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.util {		public class MouseGlobalState {		import flash.events.*;		import flash.display.Stage;				import bubbletools.util.MouseInteractive;			private static var _instance:MouseGlobalState = null;			private var currentMouseOver:MouseInteractive;		private var currentMouseDown:MouseInteractive;		private var currentMouseDrag:MouseInteractive;			public static function instance():MouseGlobalState {			if (MouseGlobalState._instance == null) {				MouseGlobalState._instance = new MouseGlobalState();			}			return MouseGlobalState._instance;		}		public function MouseGlobalState() {					currentMouseDrag = new MouseInteractive();					Main._stage.addEventListener(Event.MOUSE_LEAVE, stageMouseOut);			// A mouse move out of the player			Main.instance().addEventListener(MouseEvent.MOUSE_MOVE, stageMouseMove);	// A mouse move anywhere on the stage			}			// Global Event Handling ==========================================================================================		//           				public function stageMouseOut(event:Event) {			if (currentMouseDrag != null) {				currentMouseDrag.handleMouseEvent("stageout");				currentMouseDrag.updateMouseState("up");				currentMouseDrag.updateMouseState("stopdrag");			}		}		public function stageMouseMove(event:MouseEvent) {			if (currentMouseDrag != null) {				if(currentMouseDrag.getMouseState().DRAGGING()) {					currentMouseDrag.isDragging(event);				}			}		}		public function registerMouseDrag(m:MouseInteractive):void {			if(currentMouseDrag != m) {				if (currentMouseDrag != null) {					currentMouseDrag.updateMouseState("stopdrag"); 					currentMouseDrag = null;				}				currentMouseDrag = m;			}		}		public function clearMouseDrag():void {			currentMouseDrag = null;		}   		public function hasCurrentDrag():Boolean {			if(currentMouseDrag != null) {				return true;			} else {				return false;			}		}	}}