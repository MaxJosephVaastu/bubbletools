// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.core.async {	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.*;	import bubbletools.core.async.AsyncLoader;	import bubbletools.core.threading.Threaded;	import bubbletools.util.Debug;	// Use for loading single files, load completion will activate setComplete() in requesting class.	// For loading multiple files, use MultiLoader, which will use instances of this class as needed	public class DataLoader implements AsyncLoader {		public var sourceFile:String;		public var sourceRequest:URLRequest;		public var returnClass:Object;		public var loader:URLLoader;		public var loaderDone:URLLoader;		public var returnThreadId:Number;		public function setReturn(returnClass:Threaded):void {			this.returnClass = returnClass;		}		public function setParams(sourceFile, returnClass:Threaded):void {			this.sourceFile = sourceFile;			this.returnClass = returnClass;			loader = new URLLoader();			loader.addEventListener(Event.COMPLETE, dataLoadComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, dataLoadFailed);			sourceRequest = new URLRequest(sourceFile);			returnThreadId = this.returnClass.getThreadId();		}		public function dataLoadComplete(event:Event):void {			loaderDone = URLLoader(event.target);			returnClass.resumeOnThread(returnThreadId);			returnClass.completeLoad(loaderDone.data);		}		public function dataLoadFailed(event:IOErrorEvent):void {			returnClass.resumeOnThread(returnThreadId);			returnClass.errorLoading();		}		public function startLoad():void {			returnClass.setIncomplete();			Debug.output(this, "Starting Load of " + sourceFile);			loader.load(sourceRequest);		}	}}