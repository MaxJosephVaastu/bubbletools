// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.parameters {	import flash.display.Sprite;import bubbletools.util.Pointdata;import bubbletools.ui.parameters.InterfaceParameters;import flash.display.BitmapData;import bubbletools.core.library.BitmapFile;import bubbletools.ui.framework.UI;public class WindowParameters extends InterfaceParameters {		private var stack:Boolean = false;					//  default setting is windows do not z-sort	private var isIconDroppable:Boolean = false;		//  default option is to not allow dropping icons 	private var directDrag:Boolean = false;				//  default option is window can only be dragged by titlebar	private var titleBar:Boolean = false;				//  default option is no titlebar	private var scrollHorizontal:Boolean;	private var scrollVertical:Boolean;	private var scrollBarSize:Number = 20;				//  default size is 20 pixels wide or tall	private var scrollBarSliderSize:Number = 50			//  default size is 50 pixels wide or tall	private var scrollBarImageId:String;	private var scrollBarOutline:Number = 0;	private var scrollBarSliderOutline:Number = 0;	private var scrollBarSliderImageId:String;	private var titleText:String;						//  text for this window's titlebar	private var titleTextColor:Number = 0xFF000000;	private var titleTextFont:String = "Arial";			//  Default is Arial	private var titleTextFontSize:Number = 12;			//  Default is 12 point font	private var titleBarSize:Number = 20;				//  default size (height) of the titlebar is 20 pixels tall	private var titleBarBackgroundId:String;	private var closeButton:Boolean = false;			//  whether the window has a close button on its titlebar	private var closeButtonImage:String;				//  image for the titlebar close button	private var scrollBarSliderImage:BitmapData;	private var scrollBarImage:BitmapData;		public function WindowParameters(){		super();		componentType = "Window";		backgroundColor = 0xFFDDDDDD;   				//	default color is light grey		//setDropShadow(true);							//  override default setting : display drop shadow	}	// Move to front on click or not	public function setStack(stack:Boolean):void {		this.stack = stack;	}	public function getStack():Boolean {		return(stack);	}	// Show a vertical scrollbar	public function setScrollVertical(scrollVertical:Boolean):void {		this.scrollVertical = scrollVertical;	}	public function getScrollVertical():Boolean {		return(scrollVertical);	}	// Show a horizontal scrollbar	public function setScrollHorizontal(scrollHorizontal:Boolean):void {		this.scrollHorizontal = scrollHorizontal;	}	public function getScrollHorizontal():Boolean {		return(scrollHorizontal);	}	// Scrollbar size	public function setScrollBarSize(scrollBarSize:Number):void {		this.scrollBarSize = scrollBarSize;	}	public function getScrollBarSize():Number {		return(scrollBarSize);	}	// Scrollbar slider size	public function setScrollBarSliderSize(scrollBarSliderSize:Number):void {		this.scrollBarSliderSize = scrollBarSliderSize;	}	public function getScrollBarSliderSize():Number {		return(scrollBarSliderSize);	}	// Scrollbar Image	public function setScrollBarImage(scrollBarImageId:String):void {		this.scrollBarImageId = scrollBarImageId;	}	public function getScrollBarImage():String {		return(scrollBarImageId)	}	// Scrollbar slider Image	public function setScrollBarSliderImage(scrollBarSliderImageId:String):void {		this.scrollBarSliderImageId = scrollBarSliderImageId;	}	public function getScrollBarSliderImage():String {		return(scrollBarSliderImageId)	}	// Scrollbar slider outline	public function setScrollBarSliderOutline(scrollBarSliderOutline:Number):void {		this.scrollBarSliderOutline = scrollBarSliderOutline;	}	public function getScrollBarSliderOutline():Number {		return(scrollBarSliderOutline)	}	// Scrollbar outline			public function setScrollBarOutline(scrollBarOutline:Number):void {		this.scrollBarOutline = scrollBarOutline;	}	public function getScrollBarOutline():Number {		return(scrollBarOutline)	}	// Has titlebar or not	public function setTitleBar(titleBar:Boolean):void {		this.titleBar = titleBar;	}	public function getTitleBar():Boolean {		return(titleBar);	}	// Titlebar size (height)	public function setTitleBarSize(titleBarSize:Number):void {		this.titleBarSize = titleBarSize;	}	public function getTitleBarSize():Number {		return(titleBarSize);	}	// Titlebar Text	public function setTitleText(titleText:String):void {		this.titleText = titleText;	}	public function getTitleText():String {		return(titleText);	}	// Titlebar Text Color	public function setTitleTextColor(titleTextColor:Number):void {		this.titleTextColor = titleTextColor;	}	public function getTitleTextColor():Number {		return(titleTextColor);	}	// Titlebar Text Font	public function setTitleTextFont(titleTextFont:String):void {		this.titleTextFont = titleTextFont;	}	public function getTitleTextFont():String {		return(titleTextFont);	}	// Titlebar Text Font Size	public function setTitleTextFontSize(titleTextFontSize:Number):void {		this.titleTextFontSize = titleTextFontSize;	}	public function getTitleTextFontSize():Number {		return(titleTextFontSize);	}	// Titlebar Background Image	public function setTitleBarBackground(titleBarBackgroundId:String):void {		this.titleBarBackgroundId = titleBarBackgroundId;	}	public function getTitleBarBackground():String {		return(titleBarBackgroundId)	}	// Has close button	public function setCloseButton(closeButton:Boolean):void {		this.closeButton = closeButton;	}	public function getCloseButton():Boolean {		return(closeButton);	}	// Close button image	public function setCloseButtonImage(closeButtonImage:String):void {		this.closeButtonImage = closeButtonImage;	}	public function getCloseButtonImage():String {		return closeButtonImage;	}	// Window allowed to be dropped on or not	public function setIconDroppable(isIconDroppable:Boolean):void {		this.isIconDroppable = isIconDroppable;	}	public function getIconDroppable():Boolean {		return(isIconDroppable);	}    // Direct Drag allowed or not	public function setDirectDrag(directDrag:Boolean):void {		this.directDrag = directDrag;	}                                	public function getDirectDrag():Boolean {		return directDrag;	}}}