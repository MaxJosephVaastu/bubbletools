// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.parameters {        		import flash.display.BitmapData;	import bubbletools.util.Pointdata;	import bubbletools.ui.parameters.InterfaceParameters;	public class PanelItemParameters extends InterfaceParameters {			private var textDisplaySize:Pointdata;		private var itemId:String;            		private var buttonIsToggle:Boolean = true;		private var buttonDefaultImageId:String;		private var buttonOverImageId:String;  		private var buttonDownImageId:String;    		private var textPosition:Pointdata;		private var textBold:Boolean = false;			public function PanelItemParameters(){			super();                           			componentType = "PanelItem";     			itemTextFont = "Tahoma";			textPosition = new Pointdata(0,0);			textDisplaySize = new Pointdata(0,0);			componentType = "PanelItem";			backgroundColor	= 0xFFFFFFFF;   					//  default color is white					}		// The ID that will report back when pressed		public function setItemId(itemId:String):void {			this.itemId = itemId;		}		public function getItemId():String {			return(itemId);		}         	    // Buttons is a toggle button (selects and deselects when pressed)		public function setButtonIsToggle(isToggle:String):void {			this.buttonIsToggle = buttonIsToggle;		}		public function getButtonIsToggle():Boolean {			return(buttonIsToggle);		}      		// Text Position		public function setTextPosition(textPosition:Pointdata):void {				this.textPosition = textPosition;		}		public function getTextPosition():Pointdata {			return(textPosition);		}  		// Text Boldface		public function setItemTextDisplayBold(textBold:Boolean):void {				this.textBold = textBold;		}		public function getItemTextDisplayBold():Boolean {			return(textBold);		}         		// Width and Height of Textfield		public function setTextDisplaySize(textDisplaySize:Pointdata):void {				this.textDisplaySize = textDisplaySize;		}		public function getTextDisplaySize():Pointdata {			return(textDisplaySize);		}    				// Image states - Button Off		public function setButtonDefaultState(buttonDefaultImageId:String):void {		   this.buttonDefaultImageId = buttonDefaultImageId;		}		public function getButtonDefaultStateId():String {			return buttonDefaultImageId;		}			// Image states - Button Over		public function setButtonOverState(buttonOverImageId:String):void {			this.buttonOverImageId = buttonOverImageId;		}		public function getButtonOverStateId():String {			return buttonOverImageId;		}				// Image states - Button Down		public function setButtonDownState(buttonDownImageId:String):void {			this.buttonDownImageId = buttonDownImageId;		}		public function getButtonDownStateId():String {			return buttonDownImageId;		}	  			}}