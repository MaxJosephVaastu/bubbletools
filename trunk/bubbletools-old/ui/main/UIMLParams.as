// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.main {		import bubbletools.util.Pointdata;	import bubbletools.util.ParseBoolean;	import bubbletools.ui.parameters.*;	import bubbletools.ui.main.ComponentTypes;		public class UIMLParams {				private var paramsXML:XML;		private static var _instance:UIMLParams = null;			public static function instance():UIMLParams {			if (UIMLParams._instance == null) {				UIMLParams._instance = new UIMLParams();			}			return UIMLParams._instance;		}			public function UIMLParams(){}			public function createParameters(componentType:String, componentId:String, newParamsXML:XML):InterfaceParameters {					paramsXML = newParamsXML;					if(UIMLDefaults.instance().hasDefaults(componentType)) {				paramsXML = UIMLDefaults.instance().applyDefaults(componentType, paramsXML);			}					if(ComponentTypes.instance().getType(componentType)) {				var paramConstructor = ComponentTypes.instance().getType(componentType).getParameterConstructor();				var componentParams = new paramConstructor();						componentParams.setId(componentId);						var componentMethods = ParameterBindingList.instance().getComponentMethods(componentType);						for(var i:Number = 0; i<componentMethods.length; i++) {					var currentMethod:String = componentMethods[i];					var paramArray:Array = ParameterBindingList.instance().getMethodBindings(currentMethod);					// trace("Bindings for "+currentMethod);									var parametersFound = true;									for(var j:Number = 0; j<paramArray.length; j++) {						var currentBinding = paramArray[j].getParamText();						if(checkParamValue(currentBinding)) {							//  trace("Parameter found in XML : "+currentBinding);						} else {							//	trace("Parameter missing from XML : "+currentBinding);							parametersFound = false;						}					}								if(parametersFound) {										//	trace("All parameters found for binding : "+currentMethod);											switch(paramArray[0].getParamType()) {							case "Data" :								var dataList:XML = XML(getParamValue(paramArray[0].getParamText()));								var itemList:XMLList = dataList.child("Item");								var dataArray:Array = new Array();								for(var k:Number = 0; k<itemList.length(); k++) {									var values:Array = new Array();									for(var v:Number = 0; v<itemList[k].children().length(); v++) {										values[v] = itemList[k].children()[v];									}									dataArray.push(values);								}								componentParams[currentMethod](dataArray);								break;							case "Pointdata" :								var dataX:Number = Number(getParamValue(paramArray[0].getParamText()));								var dataY:Number = Number(getParamValue(paramArray[1].getParamText()));								var paramObject:Pointdata = new Pointdata(dataX, dataY);								componentParams[currentMethod](paramObject);								break;							case "String" :								var dataString:String = getParamValue(paramArray[0].getParamText());								componentParams[currentMethod](dataString);								break;							case "Boolean" :								var dataBool:Boolean = ParseBoolean.getValue(getParamValue(paramArray[0].getParamText()));								componentParams[currentMethod](dataBool);								break;							case "Number" :								var dataNumber:Number = Number(getParamValue(paramArray[0].getParamText()));								componentParams[currentMethod](dataNumber);								break;							case "Component" :								var nestedNode:XML = XML(getParamValue(paramArray[0].getParamText()));								var nestedType:String = nestedNode.attribute("type");								var nestedId:String = nestedNode.attribute("id");								var paramXML:XML = XML(nestedNode.child("Parameters"));								var dataParameters:InterfaceParameters = createParameters(nestedType, nestedId, paramXML);								componentParams[currentMethod](nestedType, dataParameters);								break;						}					}				}						var iParams = InterfaceParameters(componentParams);				iParams.storeXML(paramsXML);						return(iParams);					} else {							trace("[WARNING] type "+componentType+" is not a registered component, skipping.")				return(null)					}			}			public function checkParamValue(paramName:String):Boolean {			if(paramsXML.child(paramName) != undefined) {				return(true);			} else {				return(false);			}		}		public function getParamValue(paramName:String):String {			var paramVal = paramsXML.child(paramName);			return(paramVal);		}	}}