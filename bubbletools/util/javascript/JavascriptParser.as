// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.util.javascript {	import bubbletools.util.Strings;	public class JavascriptParser {		public function JavascriptParser() {		}		//  Normalizes a JS script into an XML object		public static function parse(jscode:String, xmlFormat:Number):XML {			var i:Number;			var j:Number;			var jsXMLStr:String = "<javascript>";			jsXMLStr += Strings.lineBreak;			var nesting:Number = 1;			jscode = " " + jscode;			// Remove linebreaks (code /n)			jscode = Strings.toSingleLine(jscode);			var xml:String = JavascriptParser.toNodeTree(jscode, "{", "}", xmlFormat);			jsXMLStr += "</javascript>";			var jsXML:XML = new XML("<javascript>" + xml + "</javascript>");			return (XML(jsXML));		}		private static function toNodeTree(data:String, open:String, close:String, xmlFormat:Number):String {			var q = String.fromCharCode(34);			var TAG_START:String;			var TAG_OPEN_END:String;			var TAG_CLOSE_END:String;			var NODE_END:String;			if (xmlFormat == JavascriptFile.XML_SIMPLE) {				TAG_START = "<jsnode data=" + q;				TAG_OPEN_END = q + ">";				TAG_CLOSE_END = q + "/>";				NODE_END = "</jsnode>"			} else if (xmlFormat == JavascriptFile.XML_CDATA) {				TAG_START = "<jsnode><![CDATA[";				TAG_OPEN_END = "]]>";				TAG_CLOSE_END = "]]></jsnode>";				NODE_END = "</jsnode>";			}			var firstOpen:Number = data.indexOf(open);			var firstClose:Number = data.indexOf(close);			var lastOpen:Number = data.lastIndexOf(open);			var lastClose:Number = data.lastIndexOf(close);			var xml:String = "";			var localData:String;			var nodeData:String;			if ((firstOpen != -1)) {				if (lastClose != -1) {					if (firstClose < firstOpen) {						localData = data.substr(0, firstClose);						localData = Strings.removeLeading(localData);						localData = Strings.removeTrailing(localData);						xml = TAG_START + localData + TAG_CLOSE_END + NODE_END;						nodeData = data.substr(firstClose + 1);						xml += toNodeTree(nodeData, open, close, xmlFormat);					} else {						localData = data.substr(0, firstOpen);						localData = Strings.removeLeading(localData);						localData = Strings.removeTrailing(localData);						xml = TAG_START + localData + TAG_OPEN_END;						nodeData = data.substr(firstOpen + 1, lastClose + 1);						xml += toNodeTree(nodeData, open, close, xmlFormat);					}				}			} else {				if (lastClose != -1) {					// Tail end nodes					localData = data.substr(0, firstClose);					localData = Strings.removeLeading(localData);					localData = Strings.removeTrailing(localData);					xml = TAG_START + localData + TAG_CLOSE_END + NODE_END;					nodeData = data.substr(firstClose + 1);					xml += toNodeTree(nodeData, open, close, xmlFormat);				} else {					// Debug.output(this, "No pair of "+open,close+" found in " + data);				}			}			return xml;		}	}}