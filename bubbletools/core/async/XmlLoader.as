// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.core.async {		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequestHeader;	import flash.events.*;	import bubbletools.core.async.AsyncLoader;	import bubbletools.core.threading.Threaded;	public class XmlLoader implements AsyncLoader {			public var sourceFile:String;		public var sourceRequest:URLRequest;		public var loader:URLLoader;		public var returnClass:Object;		public var xmlObj:XML;		public var returnThreadId:String;				public function setReturn(returnClass:Threaded):void {			this.returnClass = returnClass;		}		public function setParams(sourceFile:String, returnClass:Threaded):void {			this.sourceFile = sourceFile;			this.returnClass = returnClass;			sourceRequest = new URLRequest(sourceFile);			loader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.addEventListener(Event.COMPLETE, xmlLoaded);			loader.addEventListener(IOErrorEvent.IO_ERROR, xmlError);			returnThreadId = this.returnClass.getThreadId();		}		public function addHeader(header:URLRequestHeader):void {			sourceRequest.requestHeaders.push(header);		}		public function startLoad():void {			this.returnClass.setIncomplete();			Debug.output(this, "[XmlLoader] Starting Load of "+sourceFile);			loader.load(sourceRequest);		}				public function xmlError(event:IOErrorEvent):void {			Debug.output(this, "[XmlLoader] could not find file "+sourceFile);			returnClass.resumeOnThread(returnThreadId);			returnClass.errorLoading();		}				public function xmlLoaded(event:Event):void {						XML.ignoreWhitespace = true;				var valid:Boolean = false;			var xmlObj:XML;						try {				xmlObj = new XML(event.target.data);				valid = true;			} catch (e) {				Debug.output(this, "[XmlLoader] could not parse data to XML");				Debug.output(this, "data="+event.target.data);				valid = false;			}						if(valid) {				if(xmlObj.children().length() > 0) {					returnClass.resumeOnThread(returnThreadId);					returnClass.completeLoad(xmlObj);				} else {					Debug.output(this, "[XmlLoader] no nodes detected in "+sourceFile);					returnClass.resumeOnThread(returnThreadId);					returnClass.errorLoading();				}			} else {				Debug.output(this, "[XmlLoader] aborting with error");				returnClass.resumeOnThread(returnThreadId);				returnClass.errorLoading();			}		}	}}