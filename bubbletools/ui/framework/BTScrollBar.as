// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {	import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.interfaces.IContainer;	import bubbletools.ui.parameters.*;	import bubbletools.util.Pointdata;	import flash.events.TimerEvent;	import flash.utils.Timer;	public class BTScrollBar extends BTSlideControl {		private var extendedParameters:ScrollBarParameters;		private var targetViewableWidth:Number;		private var targetViewableHeight:Number;		private var targetContentHeight:Number;		private var targetContentWidth:Number;		private var targetScrollRange:Number;		private var targetOffsetNew:Number;		private var targetOffsetCurrent:Number;		private var targetOffsetDelta:Number;		private var i:Number;		private var targetContentItem:BTComponent;		private var scrollTarget:BTComponent;		private var scrollWindow:BTComponent;		private var arrowMax:BTButton;		private var aMax:ButtonParameters;		private var arrowMin:BTButton;		private var aMin:ButtonParameters;		private var arrowMax_id:String;		private var arrowMin_id:String;		private var buttonScrollDirection:Number = 1;		private var buttonScrollAmount:Number = 10;		private var buttonScrollTimer:Timer;		private var buttonScrollSpeed:Number = 50;		private var topOffset:Number = 0;		private var bottomOffset:Number = 0;		public function BTScrollBar(parentComponent:BTComponent) {			super(parentComponent);			componentType = "ScrollBar";			allowSubcomponents = true;		}		//  =====================================================================================================		//  Required Override Methods		//		// Since this class extends BTSlideControl, use extendParameters to set BTScrollBar parmeters		public override function extendParameters():void {			extendedParameters = ScrollBarParameters(parameters);			scrollTarget = extendedParameters.getScrollTarget();			switch (scrollTarget.getType()) {				case "Window":					scrollWindow = BTWindow(extendedParameters.getScrollTarget());					break;				case "ListBox":					scrollWindow = BTListBox(extendedParameters.getScrollTarget());					break;				case "HTMLDisplay":					scrollWindow = customConstructor("HTMLDisplay")((extendedParameters.getScrollTarget()));					break;				default:					break;			}			if (extendedParameters.getControlDirection() == "vertical") {				controlRange = getParameters().getSize().Y - controlSlider.getParameters().getSize().Y;				if (extendedParameters.getArrows()) {					buttonScrollTimer = new Timer(buttonScrollSpeed);					buttonScrollTimer.addEventListener(TimerEvent.TIMER, moveTargetContentsAuto);					buttonScrollTimer.addEventListener(TimerEvent.TIMER_COMPLETE, moveTargetContentsEnd);					aMax = new ButtonParameters();					aMax.setSize(new Pointdata(getParameters().getSize().X, getParameters().getSize().X));					if (extendedParameters.getArrowsClustered()) {						aMax.setLocation(new Pointdata(0, getParameters().getSize().Y - 2 * getParameters().getSize().X));						ButtonParameters(controlSlider.getParameters()).setDragPointBottomRight(new Pointdata(0, getParameters().getSize().Y - 2 * aMax.getSize().Y - parameters.getSliderSize()));						topOffset = 0;						bottomOffset = 2 * aMax.getSize().Y;					} else {						aMax.setLocation(new Pointdata(0, 0));						ButtonParameters(controlSlider.getParameters()).setDragPointTopLeft(new Pointdata(0, aMax.getSize().Y));						ButtonParameters(controlSlider.getParameters()).setDragPointBottomRight(new Pointdata(0, getParameters().getSize().Y - aMax.getSize().Y - parameters.getSliderSize()));						topOffset = aMax.getSize().Y;						bottomOffset = aMax.getSize().Y;					}					controlSlider.updatePosition(0, topOffset);					aMax.setColor(0xFF000000);					aMax.setOutline(0);					aMax.setColorOver(0xFF000000);					aMax.setColorDown(0xFF000000);					aMax.setDefaultState(extendedParameters.getArrowMaxDefault());					aMax.setOverState(extendedParameters.getArrowMaxOver());					aMax.setDownState(extendedParameters.getArrowMaxDown());					aMax.setIsToggle(false);					aMax.setId(getId() + "_scrollButtonMax");					arrowMax_id = aMax.getId();					arrowMax = BTButton(this.addComponent("Button", aMax));					aMin = new ButtonParameters();					aMin.setSize(new Pointdata(getParameters().getSize().X, getParameters().getSize().X));					aMin.setLocation(new Pointdata(0, getParameters().getSize().Y - getParameters().getSize().X));					aMin.setColor(0x00000000);					aMin.setOutline(0);					aMin.setColorOver(0xFF000000);					aMin.setColorDown(0xFF000000);					aMin.setDefaultState(extendedParameters.getArrowMinDefault());					aMin.setOverState(extendedParameters.getArrowMinOver());					aMin.setDownState(extendedParameters.getArrowMinDown());					aMin.setIsToggle(false);					aMin.setId(getId() + "_scrollButtonMin");					arrowMin_id = aMin.getId();					arrowMin = BTButton(this.addComponent("Button", aMin));				}			} else if (extendedParameters.getControlDirection() == "horizontal") {				controlRange = getParameters().getSize().X - controlSlider.getParameters().getSize().X;			}		}		public override function handleMouseEvent(clickType:String):void {			// Do not handle mouse event if slider is being pressed			if (!controlSlider.getMouseState().MOUSE_DOWN()) {				if (extendedParameters.getArrows()) {					if (!arrowMax.getMouseState().MOUSE_DOWN() && !arrowMin.getMouseState().MOUSE_DOWN()) {						slideControlMouseEvent(clickType);					}				} else {					slideControlMouseEvent(clickType);				}			}		}		public override function registerInternal(reporter:BTComponent, interfaceEvent:UIEvent):void {			switch (reporter.getId()) {				case arrowMax_id:					switch (interfaceEvent.info.eventType) {						case UIEventType.BUTTON_PRESS:							buttonScrollDirection = -1;							BTScrollBar(this).moveTargetContents();							buttonScrollTimer.start();							break;						case UIEventType.BUTTON_RELEASE:							buttonScrollTimer.stop();							break;						case UIEventType.BUTTON_RELEASE_OUTSIDE:							buttonScrollTimer.stop();							break;						case UIEventType.BUTTON_DRAG_OUT:							//buttonScrollTimer.stop();  							break;						default:							break;					}					break;				case arrowMin_id:					switch (interfaceEvent.info.eventType) {						case UIEventType.BUTTON_PRESS:							buttonScrollDirection = 1;							BTScrollBar(this).moveTargetContents();							buttonScrollTimer.start();							break;						case UIEventType.BUTTON_RELEASE:							buttonScrollTimer.stop();							break;						case UIEventType.BUTTON_RELEASE_OUTSIDE:							buttonScrollTimer.stop();							break;						case UIEventType.BUTTON_DRAG_OUT:							//buttonScrollTimer.stop();  							break;						default:							break;					}					break;				default:					switch (interfaceEvent.info.eventType) {						case UIEventType.BUTTON_PRESS:							BTScrollBar(this).scrollTargetContents();							break;						case UIEventType.BUTTON_RELEASE:							BTScrollBar(this).scrollTargetContents();							break;						case UIEventType.BUTTON_MOVE:							BTScrollBar(this).scrollTargetContents();							break;						case UIEventType.BUTTON_RELEASE_OUTSIDE:							BTScrollBar(this).scrollTargetContents();							break;						case UIEventType.BUTTON_DRAG_OVER:							BTScrollBar(this).scrollTargetContents();							break;						case UIEventType.BUTTON_DRAG_OUT:							BTScrollBar(this).scrollTargetContents();							break;						default:							break;					}					break;			}		}		//  =====================================================================================================		//  Custom Methods		//		public override function controlEventComplete():void {			scrollTargetContents();		}		public override function resize(W:Number, H:Number):void {			currentSize = new Pointdata(W, H);			getParameters().setScaledSize(new Pointdata(W, H));			view.scale(new Pointdata(W, H));			//propagateResize(W,H);			if (extendedParameters.getControlDirection() == "vertical") {				if (extendedParameters.getArrows()) {					if (extendedParameters.getArrowsClustered()) {						arrowMax.setNewPosition(0, getParameters().getScaledSize().Y - 2 * getParameters().getScaledSize().X);						ButtonParameters(controlSlider.getParameters()).setDragPointBottomRight(new Pointdata(0, getParameters().getScaledSize().Y - 2 * aMax.getSize().Y - parameters.getSliderSize()));					} else {						ButtonParameters(controlSlider.getParameters()).setDragPointTopLeft(new Pointdata(0, aMax.getScaledSize().Y));						ButtonParameters(controlSlider.getParameters()).setDragPointBottomRight(new Pointdata(0, getParameters().getScaledSize().Y - aMax.getSize().Y - parameters.getSliderSize()));					}					arrowMin.setNewPosition(0, getParameters().getScaledSize().Y - getParameters().getScaledSize().X);				}			} else if (extendedParameters.getControlDirection() == "horizontal") {			}		}		public function moveTargetContents():void {			var moveValue:Number = buttonScrollDirection * buttonScrollAmount;			if (extendedParameters.getControlDirection() == "vertical") {				if (controlSlider.getParameters().getLocation().Y + moveValue > controlSliderParams.getDragPointTopLeft().Y) {					if (controlSlider.getParameters().getLocation().Y + moveValue < controlSliderParams.getDragPointBottomRight().Y) {						controlSlider.updatePosition(0, moveValue);						scrollTargetContents();					}				}			}		}		private function moveTargetContentsAuto(t:TimerEvent):void {			moveTargetContents();		}		private function moveTargetContentsEnd(t:TimerEvent):void {			buttonScrollTimer.reset();		}		public function resetSlider():void {			if (extendedParameters.getControlDirection() == "vertical") {				controlSlider.setNewPosition(0, 0);			} else if (extendedParameters.getControlDirection() == "horizontal") {				controlSlider.setNewPosition(0, 0);			}		}		public function scrollTargetContents():void {			if (scrollTarget.getType() == "HTMLDisplay") {				if (extendedParameters.getControlDirection() == "vertical") {					controlCurrentPosition = controlSlider.getParameters().getLocation().Y;					controlPercentage = (controlCurrentPosition - topOffset) / (controlRange - topOffset - bottomOffset);					customConstructor("HTMLDisplay")((scrollTarget)).scrollToPercent(controlPercentage);				}			} else {				if (extendedParameters.getControlDirection() == "vertical") {					controlCurrentPosition = controlSlider.getParameters().getLocation().Y;					controlPercentage = (controlCurrentPosition - topOffset) / (controlRange - topOffset - bottomOffset);					targetViewableHeight = getParameters().getScaledSize().Y;					targetContentHeight = scrollWindow.getContentSize().Y;					targetScrollRange = Math.max((targetContentHeight - targetViewableHeight), 0);					targetOffsetNew = -controlPercentage * targetScrollRange;					targetOffsetCurrent = IContainer(scrollWindow).getContentOffset().Y;					targetOffsetDelta = targetOffsetNew - targetOffsetCurrent;					var xOffset:Number = IContainer(scrollWindow).getContentOffset().X;					IContainer(scrollWindow).setContentOffset(new Pointdata(xOffset, targetOffsetNew));					i = 0;					for (i; i < scrollWindow.getComponents().length; i++) {						targetContentItem = scrollWindow.getSubcomponentByIndex(i);						if (!targetContentItem.getParameters().getFixedPosition()) {							targetContentItem.updatePosition(0, targetOffsetDelta);						}					}				} else if (extendedParameters.getControlDirection() == "horizontal") {					controlCurrentPosition = controlSlider.getParameters().getLocation().X;					controlPercentage = controlCurrentPosition / controlRange;					targetViewableWidth = getParameters().getScaledSize().X;					targetContentWidth = scrollWindow.getContentSize().X;					targetScrollRange = Math.max((targetContentWidth - targetViewableWidth), 0);					targetOffsetNew = -controlPercentage * targetScrollRange;					targetOffsetCurrent = IContainer(scrollWindow).getContentOffset().X;					targetOffsetDelta = targetOffsetNew - targetOffsetCurrent;					var yOffset:Number = IContainer(scrollWindow).getContentOffset().Y;					IContainer(scrollWindow).setContentOffset(new Pointdata(targetOffsetNew, yOffset));					i = 0;					for (i; i < scrollWindow.getComponents().length; i++) {						targetContentItem = scrollWindow.getSubcomponentByIndex(i);						if (!targetContentItem.getParameters().getFixedPosition()) {							targetContentItem.updatePosition(targetOffsetDelta, 0);						}					}				}			}		}	}}