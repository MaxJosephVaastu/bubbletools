// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {	import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.interfaces.IComponent;	import bubbletools.ui.interfaces.IContainer;	import bubbletools.ui.interfaces.Reporter;	import bubbletools.ui.main.UIMLParams;	import bubbletools.ui.parameters.*;	import bubbletools.util.Pointdata;	import flash.events.MouseEvent;	public class BTListBox extends BTScrollable implements Reporter, IContainer {		private var extendedParameters:ListBoxParameters;		private var listSelectedId:Number;		private var contentOffset:Pointdata;		private var lastMouse:Pointdata;		private var listItemIds:Array;		public function BTListBox(parentComponent:BTComponent) {			super(parentComponent);			componentType = "ListBox";			allowSubcomponents = true;			contentOffset = new Pointdata(0, 0);		}		//  =====================================================================================================		//  Reporter Implementation		//		public function makeEvent(eventType:String):UIEvent {			var newEvent:UIEvent = UIEventManager.instance().createUIEvent(id, componentType, eventType);			return (newEvent);		}		//  =====================================================================================================		//  Required Override Methods		//		public override function extendParameters():void {			extendedParameters = ListBoxParameters(parameters);			checkId();			// Create Scroll bars			if (extendedParameters.getList()) {				listItemIds = new Array();				var listData:Array = extendedParameters.getList();				var defaults:InterfaceParameters = extendedParameters.getListedParameters();				var paramConstructor:Class = extendedParameters.getListedType().getParameterConstructor();				var listedTypeName:String = extendedParameters.getListedType().getType();				var listedItems:Array = new Array();				for (var i:Number = 0; i < listData.length; i++) {					var mergedXML:XML = defaults.xml().copy();					for (var j:Number = 0; j < listData[i].length; j++) {						mergedXML.insertChildBefore(null, listData[i][j]);					}					//trace(mergedXML);					var p:InterfaceParameters = UIMLParams.instance().createParameters(listedTypeName, getId() + i, mergedXML);					paramConstructor(p).setListId(i);					paramConstructor(p).setVisible(true);					var newListItem:IComponent = IComponent(addComponent(listedTypeName, p));					listItemIds.push(newListItem.getId());				}			}		}		//  The default override displays subcomponents as list.		//  This method only applies to non-dynamic lists, i.e. lists that are predefined in UIML.		//  For lists that load later updateList() is called with a source list.		public override function displayComponent():void {			layoutList();			calculateContentSize();		}		public override function registerInternal(reporter:BTComponent, interfaceEvent:UIEvent):void {			switch (interfaceEvent.info.componentType) {				case "ScrollBar":					break;				case "Slider":					break;				case "ListItem":					switch (interfaceEvent.info.eventType) {						case UIEventType.LIST_ITEM_RELEASE:							if (selectedComponent) {								selectedComponent.deselect();							}							reporter.select();							selectedComponent = reporter;							listSelectedId = BTListItem(reporter).listId();							bubbleEvent(UIEventType.LIST_ITEM_SELECTED);							break;						default:							break;					}				default:					switch (interfaceEvent.info.eventType) {						case UIEventType.LIST_ITEM_PRESS:							if (parameters.getDraggableByContent()) {								startContentDragging();							}							break;						case UIEventType.LIST_ITEM_RELEASE:							if (parameters.getDraggableByContent()) {								stopContentDragging();							}							if (selectedComponent) {								selectedComponent.deselect();							}							reporter.select();							selectedComponent = reporter;							listSelectedId = BTComponent(reporter).getParameters().getListId();							bubbleEvent(UIEventType.LISTED_ITEM_SELECTED);							break;						case UIEventType.LIST_ITEM_RELEASE_OUTSIDE:							if (parameters.getDraggableByContent()) {								stopContentDragging();							}						default:							if (selectedComponent) {								selectedComponent.deselect();							}							reporter.select();							selectedComponent = reporter;							listSelectedId = BTComponent(reporter).getParameters().getListId();							bubbleEvent(interfaceEvent.info.eventType);							break;					}					break;			}		}		public override function handleMouseEvent(clickType:String):void {			switch (clickType) {				case "wheel_up":					mouseWheelScroll();					break;				case "wheel_down":					mouseWheelScroll();					break;				case "press":					bubbleEvent(UIEventType.LISTBOX_PRESS);					if (getParameters().getDraggable()) {						startDragging();					}					break;				case "release":					if (getParameters().getDraggable()) {						stopDragging();					}					break;				case "release_outside":					if (getParameters().getDraggable()) {						stopDragging();					}					break;			}		}		//  =====================================================================================================		//  Custom Methods		//		public function startContentDragging():void {			updateMouseState("drag");			lastMouse = new Pointdata(BTUI.canvas().mouseX, BTUI.canvas().mouseY);		}		public override function isDragging(event:MouseEvent):void {			var currentMouse:Pointdata = new Pointdata(BTUI.canvas().mouseX, BTUI.canvas().mouseY);			// Vertical			var deltaV:Number = lastMouse.Y - currentMouse.Y;			// Horizontal 			var deltaH:Number = lastMouse.X - currentMouse.X;			// Scroll calculations			var viewableHeight:Number = getParameters().getScaledSize().Y;			var contentHeight:Number = getContentSize().Y;			var scrollRange:Number = Math.max((contentHeight - viewableHeight), 0);			var contentOffset:Number = IContainer(this).getContentOffset().Y;			var percentage:Number = deltaV / scrollRange;			verticalScrollBar.setSliderTopToRatio(verticalScrollBar.controlPercentage + percentage);			verticalScrollBar.scrollTargetContents();			lastMouse = new Pointdata(BTUI.canvas().mouseX, BTUI.canvas().mouseY);		}		public function stopContentDragging():void {			updateMouseState("stopdrag");		}		public function getSelectedId():Number {			return listSelectedId;		}		public function getSelectedData():String {			return selectedComponent.getParameters().getValue();		}		public function selectItemById(id:Number):void {			var selectionId:Number = 0;			for (var i:Number = 0; i < subComponents.length; i++) {				try {					if (BTListItem(getSubcomponentByIndex(i)).listId() == id) {						selectionId = i;						break;					}				} catch (e:Error) {				}			}			if (selectedComponent) {				selectedComponent.deselect();			}			selectedComponent = getSubcomponentByIndex(selectionId);			getSubcomponentByIndex(selectionId).select();		}		public function getIdWithValue(val:String):Number {			var id:Number;			var found:Boolean = false			for (var i:Number = 0; i < subComponents.length; i++) {				if (getSubcomponentByIndex(i).getParameters().getValue() == val) {					id = BTListItem(getSubcomponentByIndex(i)).listId();					break;				}			}			return (id);		}		public function getListedTypeDefaults():InterfaceParameters {			return (extendedParameters.getListedParameters());		}		//  Replaces the list items		public function appendToList(listInfo:Array):void {			// TBD		}		//  Clears list and replaces with a new set of components		public function updateList(listItemParametersList:Array):void {			clearList();			//  Create the components			listItemIds = new Array();			for (var i:Number = 0; i < listItemParametersList.length; i++) {				var listItemParams:InterfaceParameters = InterfaceParameters(listItemParametersList[i]);				var newListItemConstructor:Class = extendedParameters.getListedType().getConstructor();				var newListItemType:String = extendedParameters.getListedType().getType();				var newListItem:IComponent = IComponent(addComponent(newListItemType, listItemParams));				listItemIds.push(newListItem.getId());			}			//  Layout in list formz			layoutList();			//  Display the components			BTUI.refreshView();			//  Update the draw depths since we just added new components			//UI.root().updateDrawDepths();			calculateContentSize();		}		public function clearList():void {			var removalIdList:Array = new Array();			for (var i:Number = 0; i < subComponents.length; i++) {				if (getSubcomponentByIndex(i).getParameters().getType() == extendedParameters.getListedType().getType()) {					removalIdList.push(getSubcomponentByIndex(i).getId());				}			}			for (var r:Number = 0; r < removalIdList.length; r++) {				var removal:BTComponent = BTUI.component(removalIdList[r]);				var id:Number = getIndexForSubcomponentById(removal.getId());				removeSubcomponent(id);			}			calculateContentSize();			setContentOffset(new Pointdata(0, 0));			if (extendedParameters.getScrollVertical()) {				verticalScrollBar.resetToZero();			}			if (extendedParameters.getScrollHorizontal()) {				horizontalScrollBar.resetToZero();			}		}		public function layoutList():void {			// Display the list - Vertical			if (extendedParameters.getScrollVertical()) {				var listheight:Number = 1;				for (var i:Number = 0; i < subComponents.length; i++) {					if (getSubcomponentByIndex(i).getParameters().getType() == extendedParameters.getListedType().getType()) {						getSubcomponentByIndex(i).getParameters().setLocation(new Pointdata(1, listheight));						listheight += getSubcomponentByIndex(i).getParameters().getSize().Y;						listheight += extendedParameters.getListSpacing();					}				}					// Display the list - Horizontal			} else if (extendedParameters.getScrollHorizontal()) {				var listwidth:Number = 1;				for (var j:Number = 0; j < subComponents.length; j++) {					if (getSubcomponentByIndex(j).getParameters().getType() == extendedParameters.getListedType().getType()) {						getSubcomponentByIndex(j).getParameters().setLocation(new Pointdata(listwidth, 1));						listwidth += getSubcomponentByIndex(i).getParameters().getSize().X;						listwidth += extendedParameters.getListSpacing();					}				}			}		}		public function mouseWheelScroll():void {			if (extendedParameters.getScrollVertical()) {				verticalScrollBar.adjustSlider(0, -mouseEvents.lastEvent.delta);				verticalScrollBar.scrollTargetContents();			}		}	}}