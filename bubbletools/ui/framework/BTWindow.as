// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {	import bubbletools.core.eventing.EventType;	import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.interfaces.IContainer;	import bubbletools.ui.interfaces.IParameters;	import bubbletools.ui.interfaces.Reporter;	import bubbletools.ui.parameters.*;	import bubbletools.util.Debug;	import bubbletools.util.Pointdata;	import flash.events.Event;	public class BTWindow extends BTScrollable implements Reporter, IContainer {		private var extendedParameters:WindowParameters;		private var contentOffset:Pointdata;		private var titleBar:BTTitleBar;		private var titleBarOffset:Number = 0;		private var t:TitleBarParameters;		private var lastDropped:BTIcon;		public function BTWindow(parentComponent:BTComponent) {			super(parentComponent);			componentType = "Window";			handCursorMode = false;			allowSubcomponents = true;			contentOffset = new Pointdata(0, 0);		}		//  =====================================================================================================		//  Reporter Implementation		//		public function makeEvent(eventType:String):UIEvent {			var newEvent:UIEvent = UIEventManager.instance().createUIEvent(id, componentType, eventType);			return (newEvent);		}		//  =====================================================================================================		//  Required Override Methods		//		public override function extendParameters():void {			extendedParameters = WindowParameters(parameters);			checkId();			if (extendedParameters.getTitleBar()) {				titleBarOffset = extendedParameters.getTitleBarSize();			}			// Create Title Bar			if (extendedParameters.getTitleBar()) {				t = new TitleBarParameters();				t.setText(extendedParameters.getTitleText());				t.setTextColor(extendedParameters.getTitleTextColor());				t.setTitleTextFont(extendedParameters.getTitleTextFont());				t.setTitleTextFontSize(extendedParameters.getTitleTextFontSize());				// t.setTileBackground(true);				t.setSize(new Pointdata(getParameters().getSize().X, extendedParameters.getTitleBarSize()));				t.setCloseButton(extendedParameters.getCloseButton());				t.setCloseButtonImage(extendedParameters.getCloseButtonImage());				t.setLocation(new Pointdata(0, 0));				t.setDraggable(getParameters().getDraggable());				t.setId(extendedParameters.getId() + "_" + "title_bar");				t.setOutline(extendedParameters.getOutline());				t.setOutlineColor(extendedParameters.getOutlineColor());				if (extendedParameters.getTitleBarBackground() != null) {					t.setImage(extendedParameters.getTitleBarBackground());				}				titleBar = BTTitleBar(this.addComponent("TitleBar", t));			}		}		public override function registerInternal(reporter:BTComponent, interfaceEvent:UIEvent):void {			switch (interfaceEvent.info.eventType) {				case UIEventType.ICON_DROP:					Debug.output(this, "item dropped on a window");					lastDropped = BTIcon(reporter);					bubbleEvent(UIEventType.WINDOW_DROPPED_ON);					break;				case UIEventType.TEXT_PRESS:					bubbleEvent(UIEventType.WINDOW_PRESS);					break;				case UIEventType.TEXT_CHANGED:					BTWindow(this).windowContentsChanged();					break;				case UIEventType.CLOSE_BUTTON_RELEASE:					hide();					break;				default:					break;			}		}		public override function handleMouseEvent(clickType:String):void {			switch (clickType) {				case "click":					bubbleEvent(UIEventType.WINDOW_CLICK);					break;				case "press":					bubbleEvent(UIEventType.WINDOW_PRESS);					if (getParameters().getDraggable()) {						if (extendedParameters.getDirectDrag()) {							// Make sure the window is allowed to be dragged from any handle							if (eligibleForDrag()) {								// Make sure we are not dragging an internal item first    								startDragging();							}						}					}					break;				case "release":					bubbleEvent(UIEventType.WINDOW_RELEASE);					if (getParameters().getDraggable()) {						stopDragging();					}					break;				case "release_outside":					if (getParameters().getDraggable()) {						stopDragging();					}					break;				case "over":					bubbleEvent(UIEventType.WINDOW_OVER);					break;				case "out":					bubbleEvent(UIEventType.WINDOW_OUT);					break;				case "move":					bubbleEvent(UIEventType.WINDOW_MOVE);					break;			}		}		//  =====================================================================================================		//  Custom Methods		//		public override function resize(W:Number, H:Number):void {			currentSize = new Pointdata(W, H);			getParameters().setScaledSize(new Pointdata(W, H));			view.scale(new Pointdata(W, H));			propagateResize(W, H);			if (extendedParameters.getTitleBar()) {				titleBar.resize(W, extendedParameters.getTitleBarSize());			}			if (extendedParameters.getScrollVertical()) {				verticalScrollBar.setNewPosition(getParameters().getScaledSize().X - extendedParameters.getScrollBarSize(), titleBarOffset);				verticalScrollBar.resize(extendedParameters.getScrollBarSize(), getParameters().getScaledSize().Y - titleBarOffset);			}			if (extendedParameters.getScrollHorizontal()) {				horizontalScrollBar.resize(getParameters().getSize().X, extendedParameters.getScrollBarSize());			}		}		public function getLastDropped():BTIcon {			return lastDropped;		}		public function windowContentsChanged():void {			if (extendedParameters.getScrollVertical()) {				verticalScrollBar.scrollTargetContents();			}		}		public function fadeWindowIn(seconds:Number):void {			if (seconds > 0) {				view.addEventListener(EventType.SPRITE_FADEIN_COMPLETE, fadeWindowInComplete);			}			view.fadeIn(seconds);		}		public function fadeWindowOut(seconds:Number):void {			if (seconds > 0) {				view.addEventListener(EventType.SPRITE_FADEOUT_COMPLETE, fadeWindowOutComplete);			}			view.fadeOut(seconds);		}		private function fadeWindowInComplete(e:Event):void {			bubbleEvent(UIEventType.WINDOW_FADEIN_COMPLETE);			view.removeEventListener(EventType.SPRITE_FADEIN_COMPLETE, fadeWindowInComplete);		}		private function fadeWindowOutComplete(e:Event):void {			bubbleEvent(UIEventType.WINDOW_FADEOUT_COMPLETE);			view.removeEventListener(EventType.SPRITE_FADEOUT_COMPLETE, fadeWindowOutComplete);		}	}}