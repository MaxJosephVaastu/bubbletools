// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {	import flash.events.MouseEvent;	import flash.display.Sprite;	import bubbletools.util.Pointdata;	import bubbletools.util.MouseEventCapture;	import bubbletools.ui.interfaces.IParameters;	import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.parameters.*	import bubbletools.ui.framework.ComponentView;	public class BTTitleBar extends BTComponent {		private var parameters:TitleBarParameters;		private var textTitle:BTTextDisplay;		private var textTitleParameters:TextDisplayParameters;		private var closeButton:BTButton;		private var closeButtonParameters:ButtonParameters;		public function BTTitleBar(parentComponent:BTComponent) {			super(parentComponent);			componentType = "TitleBar";			allowSubcomponents = true;		}		//  =====================================================================================================		//  Required Override Methods		//		public override function setParameters(newParameters:IParameters):void {			globalParameters = newParameters;			parameters = TitleBarParameters(newParameters);			checkId();			// Titlebar text			textTitleParameters = new TextDisplayParameters();			textTitleParameters.setText(getParameters().getText());			textTitleParameters.setTextColor(getParameters().getTextColor());			textTitleParameters.setFont(parameters.getTitleTextFont());			textTitleParameters.setFontSize(parameters.getTitleTextFontSize());			textTitleParameters.setSize(new Pointdata(getParameters().getSize().X, getParameters().getSize().Y));			textTitleParameters.setLocation(new Pointdata(0, 0));			textTitleParameters.setTextDisplayAlign("center");			textTitleParameters.setTextSelectable(false);			textTitleParameters.setDefaultSize(true);			textTitleParameters.setTextDisplayVerticalAlign("center");			textTitle = BTTextDisplay(this.addComponent("TextDisplay", textTitleParameters));			// Titlebar close button			if (parameters.getCloseButton()) {				closeButtonParameters = new ButtonParameters();				var buttonWidth:Number = .5 * getParameters().getSize().Y;				var buttonHeight:Number = .5 * getParameters().getSize().Y;				closeButtonParameters.setDefaultState(parameters.getCloseButtonImage());				closeButtonParameters.setId(parentComponent.getId() + "_" + "close_button");				closeButtonParameters.setSize(new Pointdata(buttonWidth, buttonHeight));				closeButtonParameters.setLocation(new Pointdata(getParameters().getSize().X - 3 * buttonWidth / 2,				getParameters().getSize().Y - 3 * buttonHeight / 2));				//closeButtonParameters.setDefaultState("xCloseButton.png");													closeButton = BTButton(this.addComponent("Button", closeButtonParameters));			}		}		public override function registerInternal(reporter:BTComponent, interfaceEvent:UIEvent):void {			switch (interfaceEvent.info.eventType) {				case UIEventType.BUTTON_RELEASE:					if (parameters.getCloseButton()) {						if (reporter == closeButton) {							bubbleEvent(UIEventType.CLOSE_BUTTON_RELEASE);						}					}					break;				case UIEventType.TEXT_PRESS:					handleMouseEvent("press");					break;				case UIEventType.TEXT_RELEASE:					handleMouseEvent("release");					break;				default:					break;			}		}		public override function handleMouseEvent(clickType:String):void {			switch (clickType) {				case "press":					bubbleEvent(UIEventType.TITLE_BAR_PRESS);					if (getParameters().getDraggable()) {						BTWindow(parentComponent).startDragging();					}					break;				case "release":					bubbleEvent(UIEventType.TITLE_BAR_RELEASE);					if (getParameters().getDraggable()) {						BTWindow(parentComponent).stopDragging();					}					break;				case "release_outside":					if (getParameters().getDraggable()) {						BTWindow(parentComponent).stopDragging();					}					break;				case "stageout":					if (getParameters().getDraggable()) {						BTWindow(parentComponent).stopDragging();					}					break;			}		}		//  =====================================================================================================		//  Custom Methods		//		public override function resize(W:Number, H:Number):void {			currentSize = new Pointdata(W, H);			getParameters().setScaledSize(new Pointdata(W, H));			view.scale(new Pointdata(W, H));			textTitle.resize(W, H);			var buttonWidth:Number = .5 * getParameters().getSize().Y;			var buttonHeight:Number = .5 * getParameters().getSize().Y;			closeButton.setNewPosition(currentSize.X - 3 * buttonWidth / 2, currentSize.Y - 3 * buttonHeight / 2);		}		public function updateTitleText(txt:String):void {			getParameters().setText(txt);			textTitle.updateText(txt);		}	}}