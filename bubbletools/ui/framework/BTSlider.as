// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {	import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.interfaces.Reporter;	import bubbletools.ui.interfaces.IParameters;	import bubbletools.ui.parameters.*;	import bubbletools.util.Pointdata;	import bubbletools.util.Debug;	public class BTSlider extends BTSlideControl implements Reporter {		public var extendedParameters:SliderParameters;		public function BTSlider(parentComponent:BTComponent) {			super(parentComponent);			componentType = "Slider";			allowSubcomponents = true;		}		//  =====================================================================================================		//  Reporter Implementation		//		public function makeEvent(eventType:String):UIEvent {			var newEvent:UIEvent = UIEventManager.instance().createUIEvent(id, componentType, eventType);			return (newEvent);		}		//  =====================================================================================================		//  Required Override Methods		//		// Since this class extends BTSlideControl, use extendParameters to set BTSlider parmeters		public override function extendParameters():void {			extendedParameters = SliderParameters(parameters);			if (extendedParameters.getControlDirection() == "vertical") {				controlRange = getParameters().getSize().Y - controlSlider.getParameters().getSize().Y;			} else if (extendedParameters.getControlDirection() == "horizontal") {				controlRange = getParameters().getSize().X - controlSlider.getParameters().getSize().X;			}		}		public override function registerInternal(reporter:BTComponent, interfaceEvent:UIEvent):void {			switch (interfaceEvent.info.eventType) {				case UIEventType.BUTTON_RELEASE:					calculateControlPercentage();					bubbleEvent(UIEventType.SLIDE_CONTROL_SLIDER_RELEASE);					break;				case UIEventType.BUTTON_MOVE:					calculateControlPercentage();					bubbleEvent(UIEventType.SLIDE_CONTROL_MOVE);					break;				default:					break;			}		}		//  =====================================================================================================		//  Custom Methods		//		public override function controlEventComplete():void {			calculateControlPercentage();		}		public function calculateControlPercentage():void {			// Default horizontal			controlRange = getParameters().getScaledSize().X - controlSlider.getParameters().getScaledSize().X;			controlCurrentPosition = controlSlider.getParameters().getLocation().X;			controlPercentage = controlCurrentPosition / controlRange;		}	}}