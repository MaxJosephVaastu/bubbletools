// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.framework {		import flash.events.MouseEvent;	import flash.display.Sprite;	import bubbletools.util.Pointdata;	import bubbletools.ui.interfaces.Reporter;	import bubbletools.ui.interfaces.IParameters;	import bubbletools.ui.eventing.*	import bubbletools.ui.framework.*	import bubbletools.ui.parameters.*	import bubbletools.util.Debug;		public class InterfaceWindow extends InterfaceComponent implements Reporter {		private var parameters:WindowParameters;			private var contentOffset:Pointdata;			private var verticalScrollBar:InterfaceScrollBar;		private var horizontalScrollBar:InterfaceScrollBar;		private var v:ScrollBarParameters;		private var h:ScrollBarParameters;			private var titleBar:InterfaceTitleBar; 		private var titleBarOffset:Number = 0;		private var t:TitleBarParameters;          				private var lastDropped:InterfaceIcon;			public function InterfaceWindow(parentComponent:InterfaceComponent) {			super(parentComponent);			componentType = "Window";			allowSubcomponents = true;			contentOffset = new Pointdata(0,0);		}				//  =====================================================================================================		//  Reporter Implementation		//		public function makeEvent(eventType:String):UIEvent {			var newEvent:UIEvent = UIEventManager.instance().createUIEvent(id, componentType, eventType);			return(newEvent);		}			//  =====================================================================================================		//  Required Override Methods		//			public override function setParameters(newParameters:IParameters):void {			globalParameters = newParameters;			parameters = WindowParameters(newParameters);					checkId();					// Create Title Bar					if(parameters.getTitleBar()) {								t = new TitleBarParameters();				t.setText(parameters.getTitleText());				t.setTextColor(parameters.getTitleTextColor());				t.setTitleTextFont(parameters.getTitleTextFont());				t.setTitleTextFontSize(parameters.getTitleTextFontSize());			   	// t.setTileBackground(true);				t.setSize(new Pointdata(getParameters().getSize().X, parameters.getTitleBarSize()));				t.setCloseButton(parameters.getCloseButton());				t.setCloseButtonImage(parameters.getCloseButtonImage());				t.setLocation(new Pointdata(0, 0));				t.setDraggable(getParameters().getDraggable());				t.setId(parameters.getId()+"_"+"title_bar");       				t.setOutline(parameters.getOutline());           				t.setOutlineColor(parameters.getOutlineColor());				if(parameters.getTitleBarBackground() != null) {        					t.setImage(parameters.getTitleBarBackground());				}							titleBar = InterfaceTitleBar(this.addComponent("TitleBar", t));  								titleBarOffset = parameters.getTitleBarSize();							}					// Create Scroll Bars					if(parameters.getScrollVertical()) {     				v = new ScrollBarParameters();				v.setControlDirection("vertical");				v.setScrollTarget(this);				v.setSize(new Pointdata(parameters.getScrollBarSize(), getParameters().getSize().Y-titleBarOffset));				v.setLocation(new Pointdata(getParameters().getSize().X-parameters.getScrollBarSize(),titleBarOffset));				v.setSliderSize(parameters.getScrollBarSliderSize());				v.setOutline(parameters.getScrollBarOutline());				v.setSliderOutline(parameters.getScrollBarSliderOutline());							if(parameters.getScrollBarImage() != null) {					v.setImage(parameters.getScrollBarImage());				}				if(parameters.getScrollBarSliderImage() != null) {					v.setSliderImage(parameters.getScrollBarSliderImage());				}  												if(parameters.getScrollBarArrows()) {					v.setArrows(true);   					v.setArrowsClustered(parameters.getScrollBarArrowsClustered());     					v.setArrowMaxDefault(parameters.getScrollBarArrowMaxDefault());					v.setArrowMaxOver(parameters.getScrollBarArrowMaxOver());					v.setArrowMaxDown(parameters.getScrollBarArrowMaxDown());					v.setArrowMinDefault(parameters.getScrollBarArrowMinDefault());					v.setArrowMinOver(parameters.getScrollBarArrowMinOver());					v.setArrowMinDown(parameters.getScrollBarArrowMinDown());   				}				       								verticalScrollBar = InterfaceScrollBar(this.addComponent("ScrollBar", v));			}						if(parameters.getScrollHorizontal()) {				h = new ScrollBarParameters();				h.setControlDirection("horizontal");				h.setScrollTarget(this);				h.setSize(new Pointdata(getParameters().getSize().X, parameters.getScrollBarSize()));				h.setLocation(new Pointdata(0, getParameters().getSize().Y-parameters.getScrollBarSize()));				h.setOutline(parameters.getScrollBarOutline());				h.setSliderOutline(parameters.getScrollBarSliderOutline()); 								if(parameters.getScrollBarArrows()) {					h.setArrows(true);    					h.setArrowsClustered(parameters.getScrollBarArrowsClustered());    					h.setArrowMaxDefault(parameters.getScrollBarArrowMaxDefault());					h.setArrowMaxOver(parameters.getScrollBarArrowMaxOver());					h.setArrowMaxDown(parameters.getScrollBarArrowMaxDown());					h.setArrowMinDefault(parameters.getScrollBarArrowMinDefault());					h.setArrowMinOver(parameters.getScrollBarArrowMinOver());					h.setArrowMinDown(parameters.getScrollBarArrowMinDown());				}	 							horizontalScrollBar = InterfaceScrollBar(this.addComponent("ScrollBar", h));			}		}					public override function registerInternal(reporter:InterfaceComponent, interfaceEvent:UIEvent):void {			switch(interfaceEvent.info.eventType) {    				case UIEventType.ICON_DROP:     					Debug.output(this, "item dropped on a window");    					lastDropped = InterfaceIcon(reporter);					bubbleEvent(UIEventType.WINDOW_DROPPED_ON);       					break;				case UIEventType.TEXT_PRESS :					bubbleEvent(UIEventType.WINDOW_PRESS);					break;				case UIEventType.TEXT_CHANGED :					InterfaceWindow(this).windowContentsChanged();					break;				case UIEventType.CLOSE_BUTTON_RELEASE :					hide();					break;				default :					break;			}					}						public override function handleMouseEvent(clickType:String):void {			switch (clickType) {				case "press" :					bubbleEvent(UIEventType.WINDOW_PRESS);					if (getParameters().getDraggable()) {						if (parameters.getDirectDrag()) {  							// Make sure the window is allowed to be dragged from any handle							if(eligibleForDrag()) {   								// Make sure we are not dragging an internal item first    								startDragging();                                           							}						}					}					break;				case "release" :					bubbleEvent(UIEventType.WINDOW_RELEASE);					if (getParameters().getDraggable()) {						stopDragging();					}					break;				case "release_outside" :					if (getParameters().getDraggable()) {						stopDragging();					}					break;				case "over" :					bubbleEvent(UIEventType.WINDOW_OVER);					break;				case "out" :					bubbleEvent(UIEventType.WINDOW_OUT);					break;				case "move" :					bubbleEvent(UIEventType.WINDOW_MOVE);					break;				}		}			//  =====================================================================================================		//  Custom Methods		//				public override function resize(W:Number,H:Number):void {			currentSize = new Pointdata(W,H);			getParameters().setScaledSize(new Pointdata(W,H));			view.scale(new Pointdata(W,H));						if(parameters.getTitleBar()) {				titleBar.resize(W,parameters.getTitleBarSize());			}		}		public function setContentOffset(contentOffset:Pointdata):void {			this.contentOffset = contentOffset;		}		public function getContentOffset():Pointdata {			return(contentOffset);		}  		public function getLastDropped():InterfaceIcon {			return lastDropped;		}               		public function windowContentsChanged():void {			if(parameters.getScrollVertical()) {				verticalScrollBar.scrollTargetContents();			}		}	}}