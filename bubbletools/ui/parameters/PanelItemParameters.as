// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.parameters {	import bubbletools.util.Pointdata;	public class PanelItemParameters extends InterfaceParameters {		private var itemId:String;		private var panelTextPosition:Pointdata;		private var panelTextSize:Pointdata;		private var buttonIsToggle:Boolean = true;		private var buttonIsOpaque:Boolean = true;		private var buttonDefaultImageId:String;		private var buttonOverImageId:String;		private var buttonDownImageId:String;		public function PanelItemParameters() {			super();			componentType = "PanelItem";			panelTextPosition = new Pointdata(0, 0);			panelTextSize = new Pointdata(0, 0);			componentType = "PanelItem";			backgroundColor = 0xFFFFFFFF;   					//  default color is white		}		// The ID that will report back when pressed		public function setItemId(itemId:String):void {			this.itemId = itemId;		}		public function getItemId():String {			return (itemId);		}		// Buttons is a toggle button (selects and deselects when pressed)		public function setButtonIsToggle(buttonIsToggle:Boolean):void {			this.buttonIsToggle = buttonIsToggle;		}		public function getButtonIsToggle():Boolean {			return (buttonIsToggle);		}		// Buttons is opaque		public function setButtonIsOpaque(buttonIsOpaque:Boolean):void {			this.buttonIsOpaque = buttonIsOpaque;		}		public function getButtonIsOpaque():Boolean {			return (buttonIsOpaque);		}		// Text Position		public function setPanelTextPosition(panelTextPosition:Pointdata):void {			this.panelTextPosition = panelTextPosition;		}		public function getPanelTextPosition():Pointdata {			return (panelTextPosition);		}		// Width and Height of Textfield		public function setPanelTextSize(panelTextSize:Pointdata):void {			this.panelTextSize = panelTextSize;		}		public function getPanelTextSize():Pointdata {			return (panelTextSize);		}		// Image states - Button Off		public function setButtonDefaultState(buttonDefaultImageId:String):void {			this.buttonDefaultImageId = buttonDefaultImageId;		}		public function getButtonDefaultStateId():String {			return buttonDefaultImageId;		}		// Image states - Button Over		public function setButtonOverState(buttonOverImageId:String):void {			this.buttonOverImageId = buttonOverImageId;		}		public function getButtonOverStateId():String {			return buttonOverImageId;		}		// Image states - Button Down		public function setButtonDownState(buttonDownImageId:String):void {			this.buttonDownImageId = buttonDownImageId;		}		public function getButtonDownStateId():String {			return buttonDownImageId;		}	}}