// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.parameters {		import bubbletools.ui.parameters.InterfaceParameters;		import flash.text.StyleSheet;	public class TextDisplayParameters extends InterfaceParameters {			private var textDisplayBold:Boolean = false;				// Default is not bold		private var textDisplayAlign:String = "center";				// Default alignment is center		private var textDisplayVerticalAlign:String = "top";		// Default alignment is top		private var styleSheet:StyleSheet;		private var isSelectable:Boolean = true;					// Default text is selectable		private var isEditable:Boolean = false;						// Default text is not editable		private var isHTML:Boolean = false;							// Default is non-html text		private var isDefaultSize:Boolean = false;		private var textFieldScale:Boolean = false;					// Default is that text fields will not grow with extra text							public function TextDisplayParameters(){			super();			componentType = "TextDisplay";			backgroundColor = 0x00000000;							// Default is transparent background for text display			outline = 0;											// Default is no outline for text display		}		// CSS Style		public function setStyleSheet(css:String):void {			if(css != null) {				this.isHTML = true;				styleSheet = new StyleSheet();				styleSheet.parseCSS(css);			}		}		public function getStyleSheet():StyleSheet {			return this.styleSheet;		}		// HTML		public function setHTML(isHTML:Boolean):void {			this.isHTML = isHTML;		}		public function getHTML():Boolean {			return isHTML;		}		// Use default sizing		public function setDefaultSize(isDefaultSize:Boolean):void {			this.isDefaultSize = isDefaultSize;		}		public function getDefaultSize():Boolean {			return isDefaultSize;		}		// Contents		public function appendText(addContents:String):void {			itemText = itemText+addContents;		}		// Sizing		public function setTextFieldScale(textFieldScale:Boolean):void {			this.textFieldScale = textFieldScale;		}		public function getTextFieldScale():Boolean {			return(textFieldScale);		}		// Bold		public function setTextDisplayBold(textDisplayBold:Boolean):void {			this.textDisplayBold = textDisplayBold;		}		public function getTextDisplayBold():Boolean {			return(textDisplayBold);		}		// Text is Selectable		public function setTextSelectable(isSelectable:Boolean):void {			this.isSelectable = isSelectable;		}		public function getTextSelectable():Boolean {			return(isSelectable);		}		// Text is Editable		public function setTextEditable(isEditable:Boolean):void {			this.isEditable = isEditable;		}		public function getTextEditable():Boolean {			return(isEditable);		}		// Text Alignment		public function setTextDisplayAlign(textDisplayAlign:String):void {			this.textDisplayAlign = textDisplayAlign;		}		public function getTextDisplayAlign():String {			return(textDisplayAlign);		}		// Text Alignment		public function setTextDisplayVerticalAlign(textDisplayVerticalAlign:String):void {			this.textDisplayVerticalAlign = textDisplayVerticalAlign;		}		public function getTextDisplayVerticalAlign():String {			return(textDisplayVerticalAlign);		}	}}