// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.parameters {		import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.Loader;	import flash.geom.Matrix;	import bubbletools.core.library.BitmapFile;	import bubbletools.ui.parameters.InterfaceParameters;	import bubbletools.ui.framework.UI;	public class ImageDisplayParameters extends InterfaceParameters {			private var imageURL:String;		private var scaleImage:Boolean = false;				// default is to not scale image to fit		private var scaleType:String = "stretch";			// default is to stretch the image.. options are 'stretch', 'fit', 'crop'		private var useCache:Boolean = true;				// default is to cache and use bitmapdata		public function ImageDisplayParameters(){			super();			componentType = "ImageDisplay";			backgroundColor = 0xFFFFFFFF;					// default color is white			useGlobalTint = false;							// default color is not to tint ImageDisplay		}		//	External Image URL for image		public function setImageURL(imageURL:String):void {			this.imageURL = imageURL;		}		public function getImageURL():String {			return(imageURL);		}		// Scale image to fit		public function setScaleImage(scaleImage:Boolean):void {			this.scaleImage = scaleImage;		}		public function getScaleImage():Boolean {			return(scaleImage);		}		// Use cache		public function setUseCache(useCache:Boolean):void {			this.useCache = useCache;		}		public function getUseCache():Boolean {			return useCache;		}		// Scale image to fit		public function setScaleType(scaleType:String):void {			this.scaleType = scaleType;			backgroundScaleType = scaleType;		}		public function getScaleType():String {			return(scaleType);		}		// Create a cache of this image		public function makeCache(img:Loader):Bitmap {			if(!UI.library().hasBitmap(imageURL)) {				var bitmapData:BitmapData;								if(scaleImage) {										var scaleW:Number;					var scaleH:Number;										switch(scaleType) {												case "stretch" :													scaleW = componentSize.X/img.width;							scaleH = componentSize.Y/img.height;							bitmapData = new BitmapData(componentSize.X, componentSize.Y, true, 0x00000000);													break;													case "fit" :													var h:Number = img.height;							var w:Number = img.width;							var a:Number = w/h;							var aDisplay:Number = componentSize.X/componentSize.Y;							var newH:Number;							var newW:Number;							if(aDisplay > a) {																trace("IMAGE aspect is NARROWER than display");								trace("IMAGE : "+a);								trace("Display : "+aDisplay);																newH = componentSize.Y;								scaleH = componentSize.Y/img.height;																newW = scaleH*img.width;								scaleW = newW/img.width;																	trace("New IMAGE width : "+newW);								trace("New IMAGE height : "+newH);														} else if (a > aDisplay) {																trace("IMAGE aspect is WIDER than display");								trace("IMAGE : "+a);								trace("Display : "+aDisplay);																newW = componentSize.X;								scaleW = componentSize.X/img.width;																newH = scaleW*img.height;								scaleH = newH/img.height;																trace("New IMAGE width : "+newW);								trace("New IMAGE height : "+newH);															} else if (a == aDisplay) {																trace("IMAGE aspect is EQUAL to display");																newW = componentSize.X;								newH = componentSize.Y;														}														trace("scaleW = "+scaleW);							trace("scaleH = "+scaleH);														bitmapData = new BitmapData(newW, newH, true, 0x00000000);															break;						case "tile" :							break;						case "crop" :							break;						default :							break;					}										// Do the scale as determined above										var scale = new Matrix();					scale.scale(scaleW, scaleH);					bitmapData.draw(img, scale);													} else {					bitmapData = new BitmapData(componentSize.X, componentSize.Y, true, 0x00000000);					bitmapData.draw(img);								}								// Add the bitmap file object to the library								var imageFile:BitmapFile = new BitmapFile(imageURL, imageURL);				imageFile.setBitmapData(bitmapData);				UI.library().addLoadedFile(imageFile);								return getCached();							} else {								// Item with the same URL already exists in the library									return getCached();			}					}		// Check if this has been loaded already in another instance, and cached		public function alreadyLoaded():Boolean {			if(UI.library().hasBitmap(imageURL)) {				return(true);			} else {				return(false);			}		}		// Get the cached version		public function getCached():Bitmap {			var image:Bitmap = UI.library().requestBitmap(imageURL);			return image;		}	}}