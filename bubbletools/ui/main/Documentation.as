// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.main {	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;		import bubbletools.ui.main.ComponentTypes;	import bubbletools.ui.main.ParameterBinding;	import bubbletools.ui.framework.*;	import bubbletools.ui.parameters.*;		public class Documentation {		private static var HEAD_TAG = 				"<head>"+			"<title>BubbleTools UI Documentation</title>"+			"<style type='text/css'> body {"+				"background-color: #CCCCFF;"+				"margin-left: 0px;"+				"margin-top: 0px;"+				"margin-right: 0px;"+				"margin-bottom: 0px;}"+							".style2 {color: #000066; font-size: 24px; font-family: Verdana, Arial, Helvetica, sans-serif;}"+				".style8 {font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold; font-size: 16px; }"+				".style9 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; }"+				".style11 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-style: italic; }"+				".style13 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; color: #333333; } "+				".style15 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-style: italic; color: #FFFFFF; }"+			"</style>"+		"</head>";				private static var _instance:Documentation = null;					private var document:Array;		private var docHTML:String;		private var classified:Boolean = false;		public static function instance():Documentation {			if (Documentation._instance == null) {				Documentation._instance = new Documentation();			}			return Documentation._instance;		}				public function Documentation():void {			document = new Array();		}				public function classifyTypes():void {						for(var componentType in ComponentTypes.instance().listAll()) {					var t:String = ComponentTypes.instance().listAll()[componentType].getType();								// Created from objects				document[t] = new Object();				document[t].localmethods = new Array();				document[t].classdescription = new String();				document[t]["componentType"] = t;				document[t]["constr"] = ComponentTypes.instance().getType(t).getConstructor();				document[t]["param"] = ComponentTypes.instance().getType(t).getParameterConstructor();				document[t].classdescription = (document[t]["constr"].DESCRIPTION != null) ? document[t]["constr"].DESCRIPTION: "...";								// Appended to on each parameter binding instantiation				document[t].methods = new Array();				document[t].propertynames = new Array();				document[t].propertytypes = new Array();				document[t].required = new Array();						// Get component local methods						var describeComponent = new document[t]["constr"](null, 0, 0);				var qualfiedName:String = getQualifiedClassName(describeComponent);				var classXML:XML = describeType(describeComponent);				var methodsXML:XMLList = classXML.child("method");				//var varsXML:XMLList = classXML.child("variable");				for(var i:Number = 0; i<methodsXML.length(); i++) {					if(methodsXML[i].attribute("declaredBy") == qualfiedName) {						var mName:String = methodsXML[i].attribute("name");						var mParamString:String = "";						var mParams:XMLList = methodsXML[i].child("parameter");						if(mParams.length() > 0) {							for(var j:Number = 0; j<mParams.length(); j++) {								var mParamTxt:String = mParams[j].attribute("type");								if(mParamTxt.indexOf("::") != -1) {									mParamTxt = mParamTxt.substr(mParamTxt.indexOf("::")+2);								}								mParamString += mParamTxt;								if(j < mParams.length()-1) {									mParamString += ",";								}							}						}						var mReturnTxt:String = methodsXML[i].attribute("returnType");						if(mReturnTxt.indexOf("::") != -1) {							mReturnTxt = mReturnTxt.substr(mReturnTxt.indexOf("::")+2);						}						document[t].localmethods.push(mName+"("+mParamString+"):"+mReturnTxt);					}				}				document[t].localmethods.sort();			}							classified = true;					}				public function record(binding:ParameterBinding){						var componentData:Object;			var t:String = binding.getComponentType();						if(!classified) {				classifyTypes();			}						if(document[t] != null) {				componentData = document[t];				componentData.methods.push(binding.getMethod()+"()");				componentData.propertynames.push("&lt;"+binding.getParamText()+"&gt;");				componentData.propertytypes.push(binding.getParamType());				componentData.required.push(binding.getRequired());			}					}					private function addClassRecord(c:Object):String {						var rec:String = "<table width='800' height='275' border='0' cellpadding='0' cellspacing='0' bordercolor='#E3E3E3' bgcolor='#6699FF'><tr><td width='810' height='275' align='left' valign='top'><table width='800' height='348' border='0' cellpadding='10' cellspacing='2'><tr><td width='605' height='33' bgcolor='#6699FF' class='style2'>"+						c.componentType+						"<span class='style15'>"+						"     "+c.classdescription+						"</span>"+						"</td></tr><tr><td height='224' bgcolor='#FFFFFF'><table width='852' height='221' border='0' cellpadding='0' cellspacing='5'><tr><td width='846'><span class='style8'>Code elements </span></td></tr><tr><td><table width='586' border='0' cellpadding='0' cellspacing='0'><tr><td width='161' class='style9'>Constructor</td><td width='415' class='style9'>"+						c.constr+						"</td></tr><tr><td class='style9'>Parameters</td><td class='style9'>"+						c.param+						"</td></tr></table>"+									// uiml properties			"</td></tr><tr><td><span class='style8'>UIML Properties</span></td></tr><tr><td height='18'><table width='884' border='0' cellpadding='0' cellspacing='0'><tr><td width='161' class='style11'>XML Entity </td><td width='155' class='style11'>Internal Method </td><td width='121' class='style11'>Data Type </td><td width='133' class='style11'>Required</td><td width='292' class='style11'>Description</td></tr>"						for(var i:Number = 0; i<c.methods.length; i++) {				rec += addParamRow(c.propertynames[i], c.methods[i], c.propertytypes[i], c.required[i]);			}			rec += "</table></td></tr>";						// events			rec += row("<td height='18' valign='top'><span class='style8'>Events</span></td>");			rec +="<tr><td height='18' valign='top'><table width='884' border='0' cellpadding='0' cellspacing='0'>";   			rec += row(colWithAttributes("eventinfo", ["width", "class"],["161","style13"]));            rec += "</table></td></tr>";						// methods			rec += row("<td height='18' valign='top'><span class='style8'>Component local and override methods</span></td>");			rec +="<tr><td height='18' valign='top'><table width='884' border='0' cellpadding='0' cellspacing='0'>";   			for(var i:Number = 0; i<c.localmethods.length; i++) {				rec += createMethodsRow(c.localmethods[i]);			}            rec += "</table></td></tr>";						// ending the class record here...			rec += "</table></td></tr>";						rec += "<tr><td height='22'><hr /></td></tr></table></td></tr>";						rec += "</table>";						return(rec);					}				private function createMethodsRow(m:String):String {			return row(colWithAttributes(m, ["width", "class"],["161","style13"]));		}		private function addParamRow(p:String, m:String, t:String, r:String):String {			return	row(	colWithAttributes(p,["class"],["style13"])+							colWithAttributes(m,["class"],["style13"])+							colWithAttributes(t,["class"],["style13"])+							colWithAttributes(r,["class"],["style13"])+							colWithAttributes("description",["class"],["style13"]));		}						// HTML Utility				private function singleRow(str:String):String {			return("<tr><td>"+str+"</td></tr>");		}		public function table(str:String):String {			return("<table>"+str+"</table>")		}		public function row(str:String):String {			return("<tr>"+str+"</tr>")		}		public function rowWithAttributes(str:String, attr:Array, vals:Array):String {			return(tag("tr", attr, vals)+str+"</tr>");		}		public function colWithAttributes(str:String, attr:Array, vals:Array):String {			return(tag("td", attr, vals)+str+"</td>");		}		public function htmldoc(str:String):String {			return("<html>"+str+"</html>")		}		public function body(str:String):String {			return("<body>"+str+"</body>")		}				public function tag(tagname:String, attr:Array, vals:Array):String {			if(vals.length == attr.length) {				var t:String = "<"+tagname;				for(var i:Number = 0; i<vals.length; i++) {					t += " "+attr[i]+"='"+vals[i]+"'";				}				t += ">";				return(t);			} else {				return("");				Debug.output(this, "Invalid attributes/values combination");			}		}				public function displayAsHTML():void {						docHTML = 			"<table width='800' border='0' cellpadding='0' cellspacing='10' id='main'>";						for(var t in document) {					docHTML += 	singleRow(addClassRecord(document[t]));			}				docHTML += 			"</table>";					docHTML = 			htmldoc(HEAD_TAG+body(docHTML));			trace(docHTML);		}			}}