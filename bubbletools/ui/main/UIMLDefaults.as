// bubbletools.* ===============================================================================// BubbleTools™ Web Application and User Interface Component Architecture for Actionscript 3// ©2007 Michael Szypula.  Any modifications to this file must keep this license block intact.// Developer : Michael Szypula// Contact : michael.szypula@gmail.com// License Information : Contact Developer to obtain license agreement.// =================================================================================================package bubbletools.ui.main {		import bubbletools.util.Pointdata;	import bubbletools.util.ParseBoolean;	import bubbletools.ui.parameters.*;	import bubbletools.ui.main.ComponentTypes;		public class UIMLDefaults{				private static var _instance:UIMLDefaults = null;		private var defaults:Array;		private var types:Array;			public static function instance():UIMLDefaults {			if (UIMLDefaults._instance == null) {				UIMLDefaults._instance = new UIMLDefaults();			}			return UIMLDefaults._instance;		}			public function UIMLDefaults(){						defaults = new Array();			types = new Array();						newDefault("TextColor")[0] = new ParameterDefault("TextDisplay", "color", "TextColor");			newDefault("Font")[0] = new ParameterDefault("TextDisplay", "font", "TextColor");			newDefault("CSS")[0] = new ParameterDefault("TextDisplay", null, "Style");			newDefault("ButtonTextColor")[0] = new ParameterDefault("Button", "color", "TextColor");			newDefault("ButtonColor")[0] = new ParameterDefault("Button", "color", "ButtonColor");			newDefault("ButtonColorOver")[0] = new ParameterDefault("Button", "color", "ButtonColorOver");			newDefault("ButtonColorDown")[0] = new ParameterDefault("Button", "color", "ButtonColorDown");			newDefault("ButtonDefaultState")[0] = new ParameterDefault("Button", "image", "DefaultState");			newDefault("ButtonOverState")[0] = new ParameterDefault("Button", "image", "OverState");			newDefault("ButtonDownState")[0] = new ParameterDefault("Button", "image", "DownState");						newDefault("TitleBarTextColor")[0] = new ParameterDefault("Window", "color", "TitleTextColor");			newDefault("TitleBarBackground")[0] = new ParameterDefault("Window", "image", "TitleBarBackground");			newDefault("TitleBarFont")[0] = new ParameterDefault("Window", "font", "TitleFont");			newDefault("TitleBarFontSize")[0] = new ParameterDefault("Window", "size", "TitleFontSize");								newDefault("WindowBackgroundColor")[0] = new ParameterDefault("Window", "color", "Color");			newDefault("ScrollBarImage")[0] = new ParameterDefault("Window", "image", "ScrollBarImage");			newDefault("ScrollBarImage")[1] = new ParameterDefault("ListBox", "image", "ScrollBarImage");						newDefault("ScrollBarSliderImage")[0] = new ParameterDefault("Window", "image", "ScrollBarSliderImage");			newDefault("ScrollBarSliderImage")[1] = new ParameterDefault("ListBox", "image", "ScrollBarSliderImage");		}				public function newDefault(defaultName:String):Array {			if(defaults[defaultName] == undefined) {				defaults[defaultName] = new Array();			}			return(defaults[defaultName]);		}			public function parseDefaultsXML(defaultsXML:XMLList):void {						var defaultNodes:XMLList = defaultsXML.children();						for(var i:Number = 0; i<defaultNodes.length(); i++) {								// The XML node name				var defaultName:String = defaultNodes[i].name();								// The list of internal defaults				for(var j:Number = 0; j<defaults[defaultName].length; j++) {										if(defaults[defaultName][j].getAttribute()) {						// Use attribute method						var defaultVal:String = defaultNodes[i].attribute(defaults[defaultName][j].getAttribute());						defaults[defaultName][j].applyTextValue(defaultVal);						types[defaults[defaultName][j].getType()] = true;					} else {						// Use node method						var defaultVal:String = defaultNodes[i];						defaults[defaultName][j].applyTextValue(defaultVal);						types[defaults[defaultName][j].getType()] = true;					}				}			}		}				public function hasDefaults(componentType:String):Boolean {			if(types[componentType]) {				return(true);			} else {				return(false);			}		}				public function applyDefaults(componentType:String, initXML:XML):XML {			var paramXML:XML = initXML;			for (var d in defaults) {				for(var j:Number = 0; j<defaults[d].length; j++) {					if(defaults[d][j].getType() == componentType) {						var defaultSetting:ParameterDefault = defaults[d][j];						if(defaultSetting.exists()) {							if(paramXML.child(defaultSetting.getNodeId()) != undefined) {								// Parameter exists in UIML; leave it							} else {								// Parameter does not exist, append the default value								var addDefault:XML = XML("<"+defaultSetting.getNodeId()+">"+														defaultSetting.textValue()+														"</"+defaultSetting.getNodeId()+">");								paramXML.appendChild(addDefault);							}						}					} 				}			}			return(paramXML);		}	}}