package com.control {		import bubbletools.core.async.*;	import bubbletools.core.eventing.*;	import bubbletools.core.library.*;	import bubbletools.core.threading.*;		import bubbletools.ui.eventing.*;	import bubbletools.ui.framework.*;	import bubbletools.ui.interfaces.*;	import bubbletools.ui.main.*;	import bubbletools.ui.parameters.*;		public class AppMainControl implements UIControl {		private var window_1:InterfaceWindow;		private var window_2:InterfaceWindow;		private var window_3:InterfaceWindow;		private var button_1:InterfaceButton;		private var button_2:InterfaceButton;		private var button_3:InterfaceButton;		private var status_text:InterfaceTextDisplay;		private var random_image:InterfaceImageDisplay;		public function AppMainControl(){						//  1. Select the components that this control will manage using UI.component(id_name);						// 	The id_name is the same name you have used in the UIML file.			//  You must cast the returned component into its type.						window_1 = InterfaceWindow(UI.component("example_window_1"));			window_2 = InterfaceWindow(UI.component("example_window_2"));			window_3 = InterfaceWindow(UI.component("example_window_3"));						button_1 = InterfaceButton(UI.component("button_window_1"));			button_2 = InterfaceButton(UI.component("button_window_2"));			button_3 = InterfaceButton(UI.component("button_window_3"));						status_text = InterfaceTextDisplay(UI.component("status_text"));			random_image = InterfaceImageDisplay(UI.component("random_image"));						//	2.	Add responders to components you are interested in.			//  NOTE: Not all component types are eligble to add responders, in practice			//  it clutters the workflow.  Buttons, Menu items, List Items, all implement the			//  Reporter interface and are eligible.						UI.addResponder("button_window_1", this);			UI.addResponder("button_window_2", this);			UI.addResponder("button_window_3", this);						//  Here we will intentionally throw a noncritical [Warning].  Watch the trace for the attempt			//  to add Responders to these windows :						UI.addResponder("example_window_1", this);			UI.addResponder("example_window_2", this);					}				//  Example function you might call to control your UI		//  In this example, we update the contents of a TextDisplay.		//  This method will be called later on when we observe user interaction.				public function myTextUpdate(newText:String):void {			status_text.updateText(newText);		}				public function myLoadImage():void {			random_image.showWhenReady(1);			random_image.updateImage("http://www.google.com/intl/en_ALL/images/logo.gif");		}					//  =====================================================================================================		//	interfaceCall (required by UIControl)		//				//  This required function is the event reciever for every UIControl class.		//  interfaceCall will send events to this class for every component this class has added a responder to.				public function interfaceCall(interfaceEvent:UIEvent):void {						//  The UIEvent you recieve contains information on the id of the component, the type of the			// 	component, and the type of event.			//  Using a basic switch implementation you can easily determine what action to take.						switch(interfaceEvent.info.eventType) {				case UIEventType.BUTTON_PRESS :					switch(interfaceEvent.name) {						case "button_window_1" :							myTextUpdate("First window button pressed");							break;						case "button_window_2" :							myTextUpdate("Second window button pressed");							break;						case "button_window_3" :							myLoadImage();							break;						default :							break;					}					break;				default :					break;			}					}		}}